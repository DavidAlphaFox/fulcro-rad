(ns com.example.ui
  (:require
    ;; This require pulls in the multimethods for rendering w/semantic UI
    [com.fulcrologic.rad.rendering.semantic-ui.semantic-ui-controls]

    [com.example.model.account :as acct]
    [com.example.ui.login-dialog :refer [LoginForm]]
    [com.fulcrologic.rad.ids :refer [new-uuid]]
    [com.fulcrologic.semantic-ui.modules.modal.ui-modal :refer [ui-modal]]
    [com.fulcrologic.semantic-ui.modules.modal.ui-modal-header :refer [ui-modal-header]]
    [com.fulcrologic.semantic-ui.modules.modal.ui-modal-content :refer [ui-modal-content]]
    [com.fulcrologic.rad :as rad]
    [com.fulcrologic.rad.form :as form]
    [com.fulcrologic.rad.controller :as controller]
    [com.fulcrologic.rad.authorization :as auth]
    [com.fulcrologic.rad.attributes :as attr]
    [com.fulcrologic.fulcro.algorithms.normalized-state :as fns]
    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]
    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]
    [com.fulcrologic.fulcro.routing.dynamic-routing :as dr :refer [defrouter]]
    [com.fulcrologic.fulcro.dom :as dom :refer [div label input]]
    [com.fulcrologic.fulcro.ui-state-machines :as uism :refer [defstatemachine]]
    [taoensso.timbre :as log]
    [com.fulcrologic.fulcro.mutations :as m]
    [clojure.set :as set]
    [com.fulcrologic.fulcro.data-fetch :as df]
    [com.fulcrologic.fulcro.algorithms.merge :as merge]
    [com.fulcrologic.fulcro.algorithms.form-state :as fs]))

(defsc AccountForm [this props]
  {::rad/type           ::rad/form
   ::rad/io?            true
   ::attr/attributes    [acct/id acct/name]

   ::form/cancel-route  ["home"]
   ::form/confirm-exit? true

   ;; intention is action can be "edit", "create", "view". ID can be the real ID, or some constant for create (so
   ;; bookmarking works?).
   ;; Could also use new tempid on create and do a check for existence
   :route-segment       ["account" :action :id]
   :will-enter          (fn [app {:keys [id]}]
                          ;; TODO: automatic type coercion on ID
                          (dr/route-immediate [::acct/id (new-uuid id)]))

   :pre-merge           (fn [{:keys [data-tree]}]
                          (merge
                            {:ui/confirmation-message "Lose unsaved changes?"}
                            (fs/add-form-config AccountForm data-tree)))

   ;; TODO: Derive query of attributes that are needed to manage the entities that hold the
   ;; attributes being edited.
   :form-fields         #{::acct/id ::acct/name}
   :query               [:ui/new? :ui/confirmation-message [::uism/asm-id '_] ::acct/id ::acct/name]
   :ident               ::acct/id}
  (form/render-form this props))

(defsc AccountListItem [this {::acct/keys [id name] :as props}]
  {::attr/attributes [acct/id acct/name]

   ;; Can be autogenerated:
   :query            [::acct/id ::acct/name]
   :ident            ::acct/id}

  ;; Could be autogenerated
  (dom/div :.item
    (div :.content
      (dom/a :.header {:onClick (fn []
                                  ;; TODO: Edit link
                                  )}
        "Name: " name))))

(def ui-account-list-item (comp/factory AccountListItem {:keyfn ::acct/id}))

(defsc AccountList [this {:keys [::acct/all-accounts] :as props}]
  {::rad/type             ::rad/report
   ::rad/io?              true
   ::rad/BodyItem         AccountListItem
   ::rad/source-attribute acct/all-accounts

   :route-segment         ["accounts"]

   ;; Our macro can generate these:
   :query                 [{::acct/all-accounts (comp/get-query AccountListItem)}]
   :ident                 (fn [] [:component/id ::account-list])}
  ;; Body could be auto-generated
  (dom/div :.ui.middle.aligned.divided.list
    (map ui-account-list-item all-accounts)))

(def ui-account-list (comp/factory AccountList))

(defsc LandingPage [this props]
  {:query         ['*]
   :ident         (fn [] [:component/id ::LandingPage])
   :initial-state {}
   :route-segment ["landing-page"]}
  (dom/div "Hello World"))

;; This will just be a normal router...but there can be many of them.
(defrouter MainRouter [this props]
  {:router-targets [LandingPage AccountList AccountForm]})

(def ui-main-router (comp/factory MainRouter))

;; TODO: This will be auto-generated UI
(defsc AuthController [this {:ui/keys [auth-context] :as props}]
  ;; TODO: query is generated from the authentication providers
  {:query                          [:ui/auth-context
                                    {:local (comp/get-query LoginForm)}
                                    [::uism/asm-id '_]]
   ::auth/authentication-providers {:local LoginForm}
   :ident                          (fn [] [:component/id ::AuthController])
   :initial-state                  {:local           {}
                                    :ui/auth-context nil}}
  ;; TODO: Logic to choose the correct factory for the provider being used
  (let [state           (uism/get-active-state this auth/machine-id)
        authenticating? (= :state/gathering-credentials state)
        {:keys [local]} props
        factory         (comp/computed-factory LoginForm)]
    (factory local {:visible? authenticating?})))

(def ui-auth-controller (comp/factory AuthController {:keyfn :id}))

(defsc Root [this {:keys [auth-controller router]}]
  {:query         [{:auth-controller (comp/get-query AuthController)}
                   {:router (comp/get-query MainRouter)}]
   :initial-state {:router          {}
                   :auth-controller {}}}
  (dom/div
    (div :.ui.top.menu
      (div :.ui.item "Demo Application")
      ;; TODO: Show how we can check authority to hide UI
      (dom/a :.ui.item {:onClick (fn []
                                   (controller/route-to! this ::main-controller
                                     ["account" "edit" (new-uuid 1)]))} "My Account")
      (dom/a :.ui.item {:onClick (fn []
                                   (controller/route-to! this ::main-controller
                                     ["account" "create" (str (new-uuid))]))} "Accounts")
      (dom/a :.ui.item {:onClick (fn []
                                   (controller/route-to! this ::main-controller ["accounts" "all"]))} "Accounts"))
    (div :.ui.container.segment
      (ui-auth-controller auth-controller)
      (ui-main-router router))))

(def ui-root (comp/factory Root))

